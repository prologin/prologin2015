from collections import namedtuple
import struct

from api import *


Position = namedtuple('Position', 'x y')
Portal = namedtuple('Portal', 'pos owner shields')


class Player:
    def __init__(self, json_id, name, score, pos):
        self.ui_id = None
        self.json_id = json_id
        self.name = name
        self.score = score
        self.pos = pos


def get_pos(obj):
    return Position(obj['x'], obj['y'])

def area_x2(x):
    a, b, c = x
    ax, ay = a.pos
    bx, by = b.pos
    cx, cy = c.pos
    return abs((bx-ax)*(cy-ay)-(cx-ax)*(by-ay))

class GameState:

    def __init__(self, json):
        # use the json file generated by the dumper
        self.turn = json['turn'][0]
        self.turn_max = json['turn'][1]

        game_map = json['map']

        self.map_width = self.map_height = TAILLE_TERRAIN

        self.player_id_to_player = {
            int(player_id): Player(int(player_id), p['name'],
                              p['score'],
                              get_pos(p))
            for player_id, p in json['players'].items()
        }
        self.players = list(self.player_id_to_player.values())
        self.players.sort(key=lambda p: p.name)
        for i, player in enumerate(self.players):
            player.ui_id = i

        self.portals = [
            Portal(get_pos(p),
                   (None if p['owner'] is None else
                    self.player_id_to_player[p['owner']]),
                   p['shields'])
            for p in game_map['portals']
        ]
        self.edges = [
            (self.portals[e['from']],
             self.portals[e['to']])
            for e in game_map['edges']
        ]
        self.triangles = [
            (self.portals[t['s0']],
             self.portals[t['s1']],
             self.portals[t['s2']])
            for t in game_map['triangles']
        ]
        # sort by decreasing area so that inner triangles cover outer triangles
        self.triangles.sort(key=lambda x: -area_x2(x))

    def get_owner(self, owner_id):
        if owner_id is not None:
            return self.players[owner_id]
