name: prologin2015

constant:
  -
    cst_name: TAILLE_TERRAIN
    cst_val: 40
    cst_comment: Taille du terrain (longueur et largeur)

  -
    cst_name: NB_TOURS
    cst_val: 100
    cst_comment: Nombre de tours à jouer avant la fin de la partie

  -
    cst_name: NB_POINTS_DEPLACEMENT
    cst_val: 8
    cst_comment: Nombre de points de déplacements par tour

  -
    cst_name: NB_POINTS_ACTION
    cst_val: 200
    cst_comment: Nombre de points d'action à chaque tour

  -
    cst_name: COUT_CAPTURE
    cst_val: 5
    cst_comment: Nombre de points d'actions que coûte la capture d'un portail

  -
    cst_name: COUT_LIEN
    cst_val: 5
    cst_comment: Nombre de points d'actions que coûte la création d'un lien

  -
    cst_name: COUT_NEUTRALISATION
    cst_val: 50
    cst_comment: Nombre de points d'actions que coûte la neutralisation
                 d'un portail de base.

  -
    cst_name: COUT_NEUTRALISATION_BOUCLIER
    cst_val: 20
    cst_comment: Nombre de points d'actions supplémentaires que coûte
                 l'attaque pour chaque bouclier présent.

  -
    cst_name: COUT_BOUCLIER
    cst_val: 10
    cst_comment: Nombre de points d'actions que coûte la mise en place
                 d'un bouclier.

  -
    cst_name: COUT_VIRUS
    cst_val: 100
    cst_comment: Nombre de points d'actions que coûte l'utilisation d'un virus

  -
    cst_name: COUT_TURBO
    cst_val: 10
    cst_comment: Nombre de points d'actions que coûte un turbo

  -
    cst_name: GAIN_TURBO
    cst_val: 1
    cst_comment: Nombre de points de déplacement donnés par le turbo

  -
    cst_name: MAX_BOUCLIERS
    cst_val: 4
    cst_comment: Nombre maximum de boucliers sur un même portail.

  -
    cst_name: POINTS_CREATION_PORTAIL
    cst_val: 3
    cst_comment: Nombre de points que rapporte la création d'un portail.

  -
    cst_name: POINTS_CREATION_LIEN
    cst_val: 5
    cst_comment: Nombre de points que rapporte la création d'un lien.

  -
    cst_name: POINTS_CHAMP
    cst_val: 10
    cst_comment: Constante de proportionnalité reliant l'aire d'un champ
                 au nombre de points qu'il rapporte par tour.

enum:
  -
    enum_name: erreur
    enum_summary: "Erreurs possibles"
    enum_field:
      - [ok, "L'action a été exécutée avec succès"]
      - [pa_insuffisants, "Vous ne possédez pas assez de points d'action pour
                           cette action."]
      - [aucun_portail, "La position spécifiée n'est pas un portail."]
      - [position_invalide, "La position spécifiée est hors de la carte."]
      - [position_eloignee, "La destination est trop éloignée."]
      - [portail_ami, "Le portail vous appartient."]
      - [portail_neutre, "Le portail est neutre."]
      - [portail_ennemi, "Le portail appartient à votre adversaire."]
      - [lien_intersection, "Le lien croise un lien existant."]
      - [lien_champ, "Le lien se trouve dans un champ existant."]
      - [limite_boucliers, "Ce portail est équipé du nombre maximal de
                            boucliers."]

struct:
  -
    str_name: position
    str_summary: Position sur la carte, donnée par deux coordonnées.
    str_tuple: yes
    str_field:
      - [x, int, "Coordonnée en X"]
      - [y, int, "Coordonnée en Y"]
  -
    str_name: lien
    str_summary: Représente un lien existant.
    str_tuple: no
    str_field:
      - [extr1, position, "Première extrémité du lien."]
      - [extr2, position, "Seconde extrémité du lien."]
      - [joueur, int, "Joueur possédant ce lien."]
  -
    str_name: champ
    str_summary: Représente un champ de contrôle existant.
    str_tuple: no
    str_field:
      - [som1, position, "Premier sommet du champ."]
      - [som2, position, "Deuxième sommet du champ."]
      - [som3, position, "Troisième sommet du champ."]
      - [joueur, int, "Joueur possédant ce champ."]

function:

# Actions
  -
    fct_name: capturer
    fct_summary: Capture le portail où est positionné votre agent.
    fct_ret_type: erreur
    fct_action: yes
    fct_arg: []

  -
    fct_name: lier
    fct_summary: "Crée un lien entre le portail où se trouve votre agent et le
                  portail de destination donné en argument."
    fct_ret_type: erreur
    fct_action: yes
    fct_arg:
      - [portail, position, "Portail de destination du lien."]

  -
    fct_name: neutraliser
    fct_summary: Neutralise le portail où se trouve votre agent.
    fct_ret_type: erreur
    fct_action: yes
    fct_arg: []

  -
    fct_name: deplacer
    fct_summary: Déplace votre agent sur la case passée en argument.
    fct_ret_type: erreur
    fct_action: yes
    fct_arg:
      - [dest, position, "Case de destination."]

  -
    fct_name: ajouter_bouclier
    fct_summary: Ajoute un bouclier au portail sur lequel se trouve votre agent.
    fct_ret_type: erreur
    fct_action: yes
    fct_arg: []

  -
    fct_name: utiliser_virus
    fct_summary: "Fait passer le portail où se situe votre agent à l'autre
                  joueur."
    fct_ret_type: erreur
    fct_action: yes
    fct_arg: []

  -
    fct_name: utiliser_turbo
    fct_summary: Utilise un turbo.
    fct_ret_type: erreur
    fct_action: yes
    fct_arg: []

# Fonctions de query sur les champs / les liens

  -
    fct_name: liste_liens
    fct_summary: Renvoie la liste de tous les liens présents.
    fct_ret_type: lien array
    fct_arg: []

  -
    fct_name: liste_champs
    fct_summary: Renvoie la liste de tous les champs de contrôle.
    fct_ret_type: champ array
    fct_arg: []

  -
    fct_name: liste_portails
    fct_summary: Renvoie la liste de tous les portails de la carte.
    fct_ret_type: position array
    fct_arg: []

  -
    fct_name: liens_bloquants
    fct_summary: "Renvoie la liste de tous les liens existants qui croisent un
        segment, entravant la création d'un lien."
    fct_ret_type: lien array
    fct_arg:
      - [ext1, position, "Première extrémité du segment."]
      - [ext2, position, "Seconde extrémité du segment."]

  -
    fct_name: lien_joueur
    fct_summary: "Renvoie le numéro du joueur contrôlant le lien donné,
        -1 si le lien n'existe pas (mais les deux positions sont bien des
        portails). Vous pouvez utiliser cette fonction pour vérifier si
        deux portails sont reliés."
    fct_ret_type: int
    fct_arg:
      - [ext1, position, "Premier portail."]
      - [ext2, position, "Second portail."]

  -
    fct_name: champ_existe
    fct_summary: "Renvoie un booléen indiquant si les 3 positions repèrent
        bien 3 portails tous reliés entre eux."
    fct_ret_type: bool
    fct_arg:
      - [som1, position, "Premier portail."]
      - [som2, position, "Deuxième portail."]
      - [som3, position, "Troisième portail."]


# Spécifique à une case

  -
    fct_name: case_dans_champ
    fct_summary: "Renvoie un booléen indiquant si la case ``pos`` se trouve dans
        un champ."
    fct_ret_type: bool
    fct_arg:
      - [pos, position, "Position de la case."]

  -
    fct_name: case_champs
    fct_summary: Renvoie la liste des champs à l'intérieur desquels ``pos``
        se trouve. Si la case est un portail, le résultat de ``case_champs``
        sera disjoint de celui de ``champs_incidents_portail``.
    fct_ret_type: champ array
    fct_arg:
      - [pos, position, "Position de la case."]

  -
    fct_name: portail_joueur
    fct_summary: "Renvoie le numéro du joueur correspondant au portail donné,
        -1 si le portail est neutre, -2 si la case n'est pas un portail. Vous
        pouvez utiliser cette fonction pour vérifier qu'une case donnée est
        bien un portail."
    fct_ret_type: int
    fct_arg:
      - [portail, position, "Position du portail."]

  -
    fct_name: portail_boucliers
    fct_summary: Renvoie le nombre de boucliers présents sur un portail.
    fct_ret_type: int
    fct_arg:
      - [portail, position, "Position du portail."]

  -
    fct_name: liens_incidents_portail
    fct_summary: "Renvoie la liste de tous les liens dont le portail donné est
        une extrémité."
    fct_ret_type: lien array
    fct_arg:
      - [portail, position, "Position du portail."]

  -
    fct_name: champs_incidents_portail
    fct_summary: "Renvoie la liste de tous les champs dont le portail donné est
        un sommet."
    fct_ret_type: champ array
    fct_arg:
      - [portail, position, "Position du portail."]

  -
    fct_name: champs_incidents_segment
    fct_summary: "Renvoie la liste de tous les champs dont le lien donné est un
        côté. Si le segment n'est pas un lien présent, renvoie la liste de tous les
        champs que la création du lien ferait apparaître."
    fct_ret_type: champ array
    fct_arg:
      - [ext1, position, "Première extrémité du segment."]
      - [ext2, position, "Seconde extrémité du segment."]


# Historique (actions de l'adversaire le tour précédent)

  -
    fct_name: hist_portails_captures
    fct_summary: "Renvoie la liste des portails capturés par votre adversaire
        au dernier tour."
    fct_ret_type: position array
    fct_arg: []
  -
    fct_name: hist_portails_neutralises
    fct_summary: "Renvoie la liste des portails neutralisés par votre
        adversaire au dernier tour. Cela inclut toutes les utilisations de
        virus."
    fct_ret_type: position array
    fct_arg: []
  -
    fct_name: hist_liens_crees
    fct_summary: "Renvoie la liste des liens créés par votre adversaire au
        dernier tour."
    fct_ret_type: position array
    fct_arg: []
  -
    fct_name: hist_champs_crees
    fct_summary: "Renvoie la liste des champs créés par votre adversaire au
        dernier tour."
    fct_ret_type: position array
    fct_arg: []

# Algorithmes offerts gratuitement

  -
    fct_name: distance
    fct_summary: Retourne la distance entre deux positions
    fct_ret_type: int
    fct_arg:
      - [pos1, position, "Première position"]
      - [pos2, position, "Seconde position"]
  -
    fct_name: score_triangle
    fct_summary: Renvoie le nombre de points que rapporte(rait) chaque
                 tour un champ existant ou hypothétique.
    fct_ret_type: int
    fct_arg:
      - [som1, position, "Premier sommet du triangle."]
      - [som2, position, "Deuxième sommet du triangle."]
      - [som3, position, "Troisième sommet du triangle."]
  -
    fct_name: intersection_segments
    fct_summary: Indique si deux segments se croisent.
                 Cette fonction correspond exactement à la condition
                 d'interférence entre liens, c'est-à-dire qu'elle renvoie
                 ``false`` si l'intersection est une extrémité des
                 deux segments.
    fct_ret_type: bool
    fct_arg:
      - [a1, position, "Première extrémité du premier segment."]
      - [a2, position, "Seconde extrémité du premier segment."]
      - [b1, position, "Première extrémité du second segment."]
      - [b2, position, "Seconde extrémité du second segment."]

# Autre
  -
    fct_name: moi
    fct_summary: Renvoie votre numéro de joueur.
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: adversaire
    fct_summary: Renvoie le numéro de votre adversaire.
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: position_agent
    fct_summary: Indique la position de l'agent du joueur désigné par le numéro ``id_joueur``.
    fct_ret_type: position
    fct_arg:
      - [id_joueur, int, "Numéro du joueur."]
  -
    fct_name: score
    fct_summary: Retourne le score du joueur désigné par le numéro ``id_joueur``.
    fct_ret_type: int
    fct_arg:
      - [id_joueur, int, "Identifiant du joueur"]
  -
    fct_name: tour_actuel
    fct_summary: Retourne le numéro du tour actuel.
    fct_ret_type: int
    fct_arg: []
  -
    fct_name: annuler
    fct_summary: "Annule la dernière action.
         Renvoie ``false`` quand il n'y a pas d'action à annuler ce tour-ci."
    fct_ret_type: bool
    fct_arg: []

user_function:
  -
    fct_name: partie_init
    fct_summary: Fonction appelée au début de la partie
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: jouer_tour
    fct_summary: Fonction appelée à chaque tour
    fct_ret_type: void
    fct_arg: []
  -
    fct_name: partie_fin
    fct_summary: Fonction appelée à la fin de la partie
    fct_ret_type: void
    fct_arg: []
